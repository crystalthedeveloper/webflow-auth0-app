{"mappings":";;;;;;;AAAA,0BAA0B;;;;;;;AAQ1B,4CAA4C;AAC5C,CAAA,GAAA,aAAK,EAAE,MAAM;AAEb,iCAAiC;AACjC,MAAM,4BAAM,CAAA,GAAA,cAAM;AAClB,0BAAI,GAAG,CAAC,CAAA,GAAA,iBAAS,EAAE,IAAI,KAAK,kCAAkC;AAE9D,6BAA6B;AAC7B,MAAM,oCAAc;IAClB,QAAQ;IACR,sBAAsB,IAAI,oCAAoC;AAChE;AAEA,0BAAI,GAAG,CAAC,CAAA,GAAA,WAAG,EAAE;AAEb,iCAAiC;AACjC,MAAM;AACN,MAAM;AAEN,iEAAiE;AACjE,CAAA,GAAA,oBAAI,EAAE,aAAa,CAAC;IAClB,YAAY,CAAA,GAAA,oBAAI,EAAE,UAAU,CAAC,IAAI,CAAC;QAChC,SAAS;QACT,WAAW;QACX,YAAY,usDAAiC,OAAO,CAAC,QAAQ,MAAM,uCAAuC;IAC5G;AACF;AAEA,0EAA0E;AAC1E,0BAAI,MAAM,CAAC,kBAAkB,OAAO,KAAK;IACvC,8EAA8E;IAC9E,MAAM,UAAE,MAAM,EAAE,GAAG,IAAI,MAAM;IAC7B,MAAM,WAAE,OAAO,EAAE,GAAG,IAAI,IAAI;IAE5B,kDAAkD;IAClD,IAAI,CAAC,UAAU,CAAC,SACd,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,OAAO;IAAoC;IAG3E,IAAI;QACF,2BAA2B;QAC3B,MAAM,eAAe,MAAM,CAAA,GAAA,oBAAI,EAAE,IAAI,GAAG,aAAa,CAAC;QACtD,MAAM,MAAM,aAAa,GAAG,EAAE,qCAAqC;QAEnE,gEAAgE;QAChE,IAAI,QAAQ,QACV,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAsB,IAAI,uCAAuC;QAGxG,iDAAiD;QACjD,MAAM,MAAM,CAAC,iCAAiC,EAAE,sCAAgB,OAAO,EAAE,OAAO,CAAC,EAAE,uBAAuB;QAC1G,MAAM,UAAU;YACd,QAAQ;YACR,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,wCAAkB,CAAC;gBAC9C,UAAU,mBAAmB,uBAAuB;YACtD;QACF;QAEA,MAAM,WAAW,MAAM,CAAA,GAAA,gBAAI,EAAE,KAAK,UAAU,qCAAqC;QAEjF,2BAA2B;QAC3B,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI,IAAI,mCAAmC;YAC5E,OAAO,IAAI,MAAM,CAAC,SAAS,MAAM,EAAE,IAAI,CAAC;gBAAE,OAAO;YAAU,IAAI,wBAAwB;QACzF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI,IAAI,sBAAsB;QAC1D,IAAI,IAAI,CAAC;YAAE,SAAS;YAAM,MAAM;QAAK,IAAI,oCAAoC;IAC/E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,gCAAgC;QAChC,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAwB,IAAI,4CAA4C;IACxG;AACF;IAEA,+CAA+C;AAC/C,2CAAe","sources":["app.js"],"sourcesContent":["// Import required modules\nimport express from 'express'; // Express.js framework\nimport bodyParser from 'body-parser'; // Middleware for parsing request bodies\nimport fetch from 'node-fetch'; // Library for making HTTP requests\nimport dotenv from 'dotenv'; // Module for loading environment variables\nimport admin from 'firebase-admin'; // Firebase Admin SDK for authentication\nimport cors from 'cors'; // Middleware for enabling CORS\n\n// Load environment variables from .env file\ndotenv.config();\n\n// Initialize Express application\nconst app = express();\napp.use(bodyParser.json()); // Use JSON body parser middleware\n\n// Enable CORS for all routes\nconst corsOptions = {\n  origin: 'https://firststep-46e83b.webflow.io', // Replace with your specific origin\n  optionsSuccessStatus: 200 // Some legacy browsers choke on 204\n};\n\napp.use(cors(corsOptions));\n\n// Retrieve environment variables\nconst WEBFLOW_API_TOKEN = process.env.WEBFLOW_API_TOKEN;\nconst WEBFLOW_SITE_ID = process.env.WEBFLOW_SITE_ID;\n\n// Initialize Firebase Admin SDK with service account credentials\nadmin.initializeApp({\n  credential: admin.credential.cert({\n    projectId: process.env.FIREBASE_PROJECT_ID, // Firebase project ID\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL, // Firebase service account email\n    privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\\\n/g, '\\n') // Firebase service account private key\n  })\n});\n\n// Define route for deleting Webflow user account using RESTful convention\napp.delete('/users/:userId', async (req, res) => {\n  // Extract user ID from URL parameters and Firebase ID token from request body\n  const { userId } = req.params;\n  const { idToken } = req.body;\n\n  // Check if both user ID and ID token are provided\n  if (!userId || !idToken) {\n    return res.status(400).json({ error: 'User ID and ID token are required' });\n  }\n\n  try {\n    // Verify Firebase ID token\n    const decodedToken = await admin.auth().verifyIdToken(idToken);\n    const uid = decodedToken.uid; // Extract user ID from decoded token\n\n    // Check if the authenticated user matches the requested user ID\n    if (uid !== userId) {\n      return res.status(403).json({ error: 'Unauthorized access' }); // Return 403 Forbidden if unauthorized\n    }\n\n    // Proceed with deleting the Webflow user account\n    const url = `https://api.webflow.com/v2/sites/${WEBFLOW_SITE_ID}/users/${userId}`; // Webflow API endpoint\n    const options = {\n      method: 'DELETE', // HTTP DELETE method\n      headers: {\n        'Authorization': `Bearer ${WEBFLOW_API_TOKEN}`, // Authorization header with Webflow API token\n        'Accept': 'application/json' // Accept JSON response\n      }\n    };\n\n    const response = await fetch(url, options); // Send DELETE request to Webflow API\n\n    // Check for network errors\n    if (!response.ok) {\n      const errorData = await response.json(); // Extract error data from response\n      return res.status(response.status).json({ error: errorData }); // Return error response\n    }\n\n    const json = await response.json(); // Parse JSON response\n    res.json({ success: true, data: json }); // Return success response with data\n  } catch (error) {\n    console.error('Error deleting Webflow user account:', error);\n    // Handle other potential errors\n    res.status(500).json({ error: 'Internal Server Error' }); // Return 500 Internal Server Error response\n  }\n});\n\n// Export the Express app as the default module\nexport default app;\n"],"names":[],"version":3,"file":"index.js.map"}