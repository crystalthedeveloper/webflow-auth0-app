{"mappings":";;;;;AAAA,+CAAqB,IAAI,CAAC,CAAA;AACxB,6BAA6B;AAC/B,GAAG,KAAK,CAAC,CAAA;IACP,QAAQ,KAAK,CAAC,gCAAgC;AAChD;;;AAIA,4CAA4C;AAC5C;AAEA,iEAAiE;AACjE,mCAAoB;IAClB,YAAY,gCAAiB,IAAI,CAAC;QAChC,SAAS;QACT,WAAW;QACX,YAAY,usDAAiC,OAAO,CAAC,QAAQ,MAAM,uCAAuC;IAC5G;AACF;AAEA,iBAAiB,OAAO,KAAK;IAC3B,mBAAmB;IACnB,IAAI,SAAS,CAAC,+BAA+B;IAC7C,IAAI,SAAS,CAAC,gCAAgC;IAC9C,IAAI,SAAS,CAAC,gCAAgC;IAE9C,sBAAsB;IACtB,IAAI,IAAI,MAAM,KAAK,UAAU;QAC3B,iCAAiC;QACjC,MAAM;QACN,MAAM;QAEN,MAAM,UAAE,MAAM,EAAE,GAAG,IAAI,KAAK;QAC5B,MAAM,WAAE,OAAO,EAAE,GAAG,IAAI,IAAI;QAE5B,kDAAkD;QAClD,IAAI,CAAC,UAAU,CAAC,SACd,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAoC;QAG3E,IAAI;YACF,2BAA2B;YAC3B,MAAM,eAAe,MAAM,4BAAa,aAAa,CAAC;YACtD,MAAM,MAAM,aAAa,GAAG,EAAE,qCAAqC;YAEnE,gEAAgE;YAChE,IAAI,QAAQ,QACV,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAsB,IAAI,uCAAuC;YAGxG,4BAA4B;YAC5B,MAAM,4BAAa,UAAU,CAAC;YAE9B,2BAA2B;YAC3B,MAAM,MAAM,CAAC,iCAAiC,EAAE,gBAAgB,OAAO,EAAE,OAAO,CAAC,EAAE,uBAAuB;YAC1G,MAAM,UAAU;gBACd,QAAQ;gBACR,SAAS;oBACP,iBAAiB,CAAC,OAAO,EAAE,kBAAkB,CAAC;oBAC9C,UAAU,mBAAmB,uBAAuB;gBACtD;YACF;YAEA,MAAM,WAAW,MAAM,MAAM,KAAK,UAAU,qCAAqC;YAEjF,2BAA2B;YAC3B,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI,IAAI,mCAAmC;gBAC5E,OAAO,IAAI,MAAM,CAAC,SAAS,MAAM,EAAE,IAAI,CAAC;oBAAE,OAAO;gBAAU,IAAI,wBAAwB;YACzF;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI,IAAI,sBAAsB;YAC1D,OAAO,IAAI,IAAI,CAAC;gBAAE,SAAS;gBAAM,MAAM;YAAK,IAAI,oCAAoC;QACtF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,gCAAgC;YAChC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAwB,IAAI,4CAA4C;QAC/G;IACF;IAEA,4BAA4B;IAC5B,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;AACvB","sources":["app.js"],"sourcesContent":["import('node-fetch').then(fetch => {\n  // Now you can use fetch here\n}).catch(err => {\n  console.error('Failed to import node-fetch:', err);\n});\nconst dotenv = require('dotenv');\nconst admin = require('firebase-admin');\n\n// Load environment variables from .env file\ndotenv.config();\n\n// Initialize Firebase Admin SDK with service account credentials\nadmin.initializeApp({\n  credential: admin.credential.cert({\n    projectId: process.env.FIREBASE_PROJECT_ID, // Firebase project ID\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL, // Firebase service account email\n    privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\\\n/g, '\\n') // Firebase service account private key\n  })\n});\n\nmodule.exports = async (req, res) => {\n  // Set CORS headers\n  res.setHeader('Access-Control-Allow-Origin', 'https://firststep-46e83b.webflow.io');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, DELETE');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n  // Your function logic\n  if (req.method === 'DELETE') {\n    // Retrieve environment variables\n    const WEBFLOW_API_TOKEN = process.env.WEBFLOW_API_TOKEN;\n    const WEBFLOW_SITE_ID = process.env.WEBFLOW_SITE_ID;\n\n    const { userId } = req.query;\n    const { idToken } = req.body;\n\n    // Check if both user ID and ID token are provided\n    if (!userId || !idToken) {\n      return res.status(400).json({ error: 'User ID and ID token are required' });\n    }\n\n    try {\n      // Verify Firebase ID token\n      const decodedToken = await admin.auth().verifyIdToken(idToken);\n      const uid = decodedToken.uid; // Extract user ID from decoded token\n\n      // Check if the authenticated user matches the requested user ID\n      if (uid !== userId) {\n        return res.status(403).json({ error: 'Unauthorized access' }); // Return 403 Forbidden if unauthorized\n      }\n\n      // Delete user from Firebase\n      await admin.auth().deleteUser(userId);\n\n      // Delete user from Webflow\n      const url = `https://api.webflow.com/v2/sites/${WEBFLOW_SITE_ID}/users/${userId}`; // Webflow API endpoint\n      const options = {\n        method: 'DELETE', // HTTP DELETE method\n        headers: {\n          'Authorization': `Bearer ${WEBFLOW_API_TOKEN}`, // Authorization header with Webflow API token\n          'Accept': 'application/json' // Accept JSON response\n        }\n      };\n\n      const response = await fetch(url, options); // Send DELETE request to Webflow API\n\n      // Check for network errors\n      if (!response.ok) {\n        const errorData = await response.json(); // Extract error data from response\n        return res.status(response.status).json({ error: errorData }); // Return error response\n      }\n\n      const json = await response.json(); // Parse JSON response\n      return res.json({ success: true, data: json }); // Return success response with data\n    } catch (error) {\n      console.error('Error deleting user accounts:', error);\n      // Handle other potential errors\n      return res.status(500).json({ error: 'Internal Server Error' }); // Return 500 Internal Server Error response\n    }\n  }\n\n  // Handle other HTTP methods\n  res.status(404).send('Not Found');\n};\n"],"names":[],"version":3,"file":"index.js.map"}