{"mappings":";;;;;;;sDACM;;;AAEN,8CAAqB,IAAI,CAAC,CAAA;AACxB,6BAA6B;AAC/B,GAAG,KAAK,CAAC,CAAA;IACP,QAAQ,KAAK,CAAC,gCAAgC;AAChD;AAEA;AAEA,MAAM,4BAAM;AAEZ,kBAAkB;AAClB,0BAAI,GAAG,CAAC,CAAC,KAAK,KAAK;IACjB,IAAI,SAAS,CAAC,+BAA+B;IAC7C,IAAI,SAAS,CAAC,gCAAgC;IAC9C,IAAI,SAAS,CAAC,gCAAgC;IAC9C;AACF;AAEA,4BAA4B;AAC5B,0BAAI,OAAO,CAAC,KAAK,CAAC,KAAK;IACrB,IAAI,SAAS,CAAC,+BAA+B;IAC7C,IAAI,SAAS,CAAC,gCAAgC;IAC9C,IAAI,SAAS,CAAC,gCAAgC;IAC9C,IAAI,MAAM,CAAC,KAAK,IAAI;AACtB;AAEA,0BAA0B;AAC1B,0BAAI,GAAG,CAAC,eAAQ,IAAI;AAEpB,qDAAqD;AACrD,0BAAI,IAAI,CAAC,kCAAkC,OAAO,KAAK;IACrD,MAAM,SAAE,KAAK,YAAE,QAAQ,EAAE,GAAG,IAAI,IAAI;IAEpC,iEAAiE;IACjE,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,8BAA8B,EAAE,MAAM,CAAC,EAAE;YACrE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,eAAe,CAAC,OAAO,qEAAgC,CAAC;YAC1D;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE,yBAAyB;YAAS;QAC3D;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,SAAS,EAAE,EACb,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS,CAAC,kDAAkD,EAAE,MAAM,CAAC;YAAE,MAAM;QAAK;aAEzG,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;YAAmD,MAAM;QAAK;IAEhG,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QACvD,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAwB;IACxD;AACF;AAEA,2BAA2B;AAC3B,MAAM,gCAAU;IACd,QAAQ;IACR,cAAc;IACd,aAAa;QACX,SAAS;IACX;IACA,YAAY,CAAC,UAAU,KAAK;QAC1B,8CAA8C;QAC9C,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,8BAAQ,MAAM,CAAC,CAAC;QACpD,QAAQ,GAAG,CAAC,oBAAoB,IAAI,OAAO;QAC3C,SAAS,SAAS,CAAC,iBAAiB,CAAC,OAAO,qEAAgC,CAAC;IAC/E;IACA,YAAY,CAAC,UAAU,KAAK;QAC1B,kCAAkC;QAClC,QAAQ,GAAG,CAAC,qBAAqB,SAAS,OAAO;IACnD;AACF;AAEA,uCAAuC;AACvC,QAAQ,GAAG,CAAC,kBAAkB;AAE9B,mBAAmB;AACnB,MAAM,iCAAW,gDAAsB;AAEvC,2BAA2B;AAC3B,0BAAI,GAAG,CAAC,QAAQ;AAEhB,MAAM;AACN,0BAAI,MAAM,CAAC,4BAAM;IACf,QAAQ,GAAG,CAAC,CAAC,gCAAgC,EAAE,2BAAK,CAAC;AACvD","sources":["pages/api/deleteUser.js"],"sourcesContent":["const express = require('express');\nconst { createProxyMiddleware } = require('http-proxy-middleware');\nconst dotenv = require('dotenv');\nimport('node-fetch').then(fetch => {\n  // Now you can use fetch here\n}).catch(err => {\n  console.error('Failed to import node-fetch:', err);\n});\n\ndotenv.config();\n\nconst app = express();\n\n// CORS middleware\napp.use((req, res, next) => {\n  res.setHeader('Access-Control-Allow-Origin', 'https://firststep-46e83b.webflow.io');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  next();\n});\n\n// Handle preflight requests\napp.options('*', (req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', 'https://firststep-46e83b.webflow.io');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  res.status(200).send();\n});\n\n// Body parsing middleware\napp.use(express.json());\n\n// POST route for updating user quiz completion count\napp.post('/api/updateQuizCompletionCount', async (req, res) => {\n  const { email, newCount } = req.body;\n\n  // Add your logic here to update the user's quiz completion count\n  try {\n    const response = await fetch(`https://api.webflow.com/users/${email}`, {\n      method: 'POST', // Use POST instead of PUT\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${process.env.WEBFLOW_API_TOKEN}`,\n      },\n      body: JSON.stringify({ 'quiz-completion-count': newCount }), // Update the quiz completion count\n    });\n\n    const json = await response.json();\n\n    if (response.ok) {\n      res.status(200).json({ message: `Quiz completion count updated for user with email ${email}`, data: json });\n    } else {\n      res.status(400).json({ error: 'Failed to update quiz completion count for user', data: json });\n    }\n  } catch (error) {\n    console.error('Error updating quiz completion count:', error);\n    res.status(500).json({ error: 'Internal Server Error' });\n  }\n});\n\n// Proxy middleware options\nconst options = {\n  target: 'https://api.webflow.com', // target host\n  changeOrigin: true, // needed for virtual hosted sites\n  pathRewrite: {\n    '^/api': '', // remove base path\n  },\n  onProxyReq: (proxyReq, req, res) => {\n    // Debug: Log the target and headers to verify\n    console.log(`Proxying request to: ${options.target}`);\n    console.log('Request headers:', req.headers);\n    proxyReq.setHeader('Authorization', `Bearer ${process.env.WEBFLOW_API_TOKEN}`);\n  },\n  onProxyRes: (proxyRes, req, res) => {\n    // Debug: Log the response headers\n    console.log('Response headers:', proxyRes.headers);\n  },\n};\n\n// Debug: Log the entire options object\nconsole.log('Proxy options:', options);\n\n// Create the proxy\nconst apiProxy = createProxyMiddleware(options);\n\n// Use the proxy middleware\napp.use('/api', apiProxy);\n\nconst PORT = process.env.PORT || 1234;\napp.listen(PORT, () => {\n  console.log(`Proxy server is running on port ${PORT}`);\n});\n"],"names":[],"version":3,"file":"index.js.map"}